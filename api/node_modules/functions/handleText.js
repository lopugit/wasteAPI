
let handleText = async function (req, res) {

	/**
	 * @Description Takes the text given in the request object and queries
	 * the recycling information database using a fuzzy text query
	 * @Params 
	 * 	@var req @type {Object} is an object with the request data of the get request
	 * 	@var res @type {Object} is an object with the response functions used to send a response
	 */
	
	// log the program status
  console.log("Querying the database with the following keyword(s): " + req.body.message);

  // connect to mongodb connection
  let db = global.client.db("wastee");
  let items = db.collection("items");

  // initialize query_output
  let query_output = []

	// double check the request has a message to query with
	if(req.body.message){

		// query the database
		query_output = await items.aggregate([
			{
				$search: {
					"compound": {
						"should": [
							{
								"text": {
									"query": req.body.message,
									"path": "name",
									"fuzzy": {
										"maxEdits": 2,
										"maxExpansions": 500
									}
								}
							},
							{
								"text": {
									"query": req.body.message,
									"path": {
										value: "name",
										"multi": "standardAnalyzer"
									},
									"fuzzy": {
										"maxEdits": 2,
										"maxExpansions": 500
									}
								}
							},
							{
								"text": {
									"query": req.body.message,
									"path": "category",
									"fuzzy": {
										"maxEdits": 2,
										"maxExpansions": 500
									}
								}
							},
							{
								"text": {
									"query": req.body.message,
									"path": {
										value: "category",
										"multi": "standardAnalyzer"
									},
									"fuzzy": {
										"maxEdits": 2,
										"maxExpansions": 500
									}
								}
							},
						]
					}
				}
			},
			{
				$limit: 10 // max number of items returned 
			},
			{
				// return the advice and if it is recyclable
				$project: {
					"_id": 0,
					"name": 1,
					"category": 1,
					"recyclable": 1,
					"advice": 1,
					"score": { "$meta": "searchScore" }
				}
			}
		]).toArray()

	}

	// put query_output into response object
	res.response.query_output = query_output

	// predefine output_message for worst case scenario
	let output_message = "Sorry! We didn't find any recycling information for the description you gave!"
	
	// if an image was given, modify the worst case scenario message to include a reference to the image given
	if(typeof res.response.imageDescription == 'string'){
		output_message = "Sorry! We didn't find any recycling information for the image you gave!"
	}
	
	// if the query contains results
	// process the results into user friendly messages
  if(query_output.length > 0){

		// change output_message to empty string
		output_message = ""

		// add image based user friendly message to output_message
		if(res.response.imageDescription) {
			output_message += "We analyzed your picture and came up with the following description: " + res.response.imageDescription + "\n\n" 
		}
		
		// append user friendly messages for each query result to output_message
		for (var i = 0; i < query_output.length; i++) {
			output_message += "If you're asking about " + query_output[i].name + ", which is in the category " + query_output[i].category +", this is what we found: \n\n" +
				"Is it recyclable? " + query_output[i].recyclable + "."
				if(query_output[i].advice) output_message += "\n\n" + query_output[i].advice
				output_message += "\n\n"
		}

  }

	// store output_message in the response object
	res.response.info = output_message

}

// export the function
module.exports = handleText