let smarts = require('smarts')()
let fs = require('fs')
let FileType = require('file-type')
let uuid = require('uuid').v4

let vision = require("@google-cloud/vision")
let client = new vision.ImageAnnotatorClient()

let handleAttachments = async function(req, res){
	// Save attachments to request ID based local directory database
	await asyncForEach(req.body.attachments, async attachment=>{
		
		if(attachment.type == 'image'){
			
			if(!(smarts.getsmart(attachment, 'imageData.bin', undefined) instanceof Buffer)){
				attachment.imageData.bin = new Buffer.from(attachment.imageData.bin.data)
			}

			let dir = __dirname+"/../../../imageDB/"+req.uuid+"/"

			// create directory for sender
			if (!fs.existsSync(dir)){
				fs.mkdirSync(dir)
			}

			// add filename uuid to attachment object
			attachment.uuid = uuid()

			// create path out of local directory + sender facebook ID
			path = dir+attachment.uuid
			
			// download image to sender ID'd local folder DB
			await save(attachment, path)
			let results = await client.labelDetection(path+"."+attachment.imageData.ext)

			let description = ""
			
			results.forEach(result=>{
				result.labelAnnotations.forEach(label=>{
					description += label.description+" "
				})
			})

			res.response.analysis = results

			res.response.imageDescription = description

			smarts.setsmart(req, "body.message", description)

		}
	})

}

module.exports = handleAttachments

async function save(attachment, path){
	try {
		attachment.imageData.ext = (await FileType.fromBuffer(attachment.imageData.bin) || { ext: 'unknown' }).ext
		path += "."+attachment.imageData.ext
		
		fs.writeFileSync(path, attachment.imageData.bin)
	} catch(err){
		console.error("Something went wrong saveing the file from data")
		console.error(err)
	}
}


async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}