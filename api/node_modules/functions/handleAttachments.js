
// import external packages
let smarts = require('smarts')()
let fs = require('fs')
let FileType = require('file-type')
let uuid = require('uuid').v4
let vision = require("@google-cloud/vision")

// initliase Google Vision API client
let client = new vision.ImageAnnotatorClient()

let handleAttachments = async function(req, res){
	
	/**
	 * @Description Takes the images provided in the req.body and sends them
	 * to Google's Vision API service to convert to text based descriptions
	 * @Params 
	 * 	@var req @type {Object} is an object with the request data of the get request
	 * 	@var res @type {Object} is an object with the response functions used to send a response
	 */
	
	// Save attachments to request ID based local directory database
	await asyncForEach(req.body.attachments, async attachment=>{
		
		if(attachment.type == 'image'){
			
			// convert image data from Array of numbers into proper Buffer
			if(!(smarts.getsmart(attachment, 'imageData.bin', undefined) instanceof Buffer)){
				attachment.imageData.bin = new Buffer.from(attachment.imageData.bin.data)
			}

			// create dirname
			let dir = __dirname+"/../../../imageDB/"+req.uuid+"/"

			// create directory for sender
			if (!fs.existsSync(dir)){
				fs.mkdirSync(dir)
			}

			// add filename uuid to attachment object
			attachment.uuid = uuid()

			// create path out of local directory + sender facebook ID
			path = dir+attachment.uuid
			
			// save image to sender ID'd local folder DB
			await save(attachment, path)

			// Send saved image to Google Vision API
			let results = await client.labelDetection(path+"."+attachment.imageData.ext)

			// initliase description variable string
			let description = ""
			
			// loop over results from Google Vision API call and combine all keywords into 1 string
			results.forEach(result=>{
				result.labelAnnotations.forEach(label=>{
					description += label.description+" "
				})
			})

			// add full Google Vision API results in the response object
			res.response.analysis = results

			// add the description generated to the response object
			res.response.imageDescription = description

			// update the request object with the description so as to
			// convert the request from image based into text based
			smarts.setsmart(req, "body.message", description)

		}

	})

}

// export handleAttachments function
module.exports = handleAttachments

async function save(attachment, path){

	/**
	 * @Description takes a Binary Buffer representing image data, extracts the image type
	 * and saves the image to a local path for use with Google Vision API
	 * @Params 
	 * 	@var attachment @type {Object} is an Object with the image data at @var attachment.imageData.bin
	 * 	@var path @type {String} is a string with the path for where to save the image
	 */
	
	try {

		// extract the fileType using buffer
		attachment.imageData.ext = (await FileType.fromBuffer(attachment.imageData.bin) || { ext: 'unknown' }).ext

		// append fileType to path
		path += "."+attachment.imageData.ext
		
		// write image data to filesystem
		fs.writeFileSync(path, attachment.imageData.bin)
		
	} catch(err){

		// log error
		console.error("Something went wrong saveing the file from data")
		console.error(err)
		
	}

}

async function asyncForEach(array, callback) {
	
	/**
	 * @Description Loops over array awaiting a callback function for each index item
	 * allowing for asynchronous actions on each index without total asynchronous behaviour
	 * @Params 
	 * 	@var array @type {Array} is an array to be looped over
	 * 	@var callback @type {Function} is a function be called where the input will be each @var array[index]
	 */
	
  for (let index = 0; index < array.length; index++) {
		
    await callback(array[index], index, array);
		
  }

}